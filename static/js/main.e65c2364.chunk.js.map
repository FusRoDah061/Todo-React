{"version":3,"sources":["components/AppHeader.js","components/SubTaskListItem.js","scripts/constants.js","components/SubTaskList.js","components/ProgressBar.js","components/TaskItem.js","components/TaskList.js","components/TaskColumn.js","components/Dialog.js","components/TextField.js","components/SubTaskForm.js","components/NewTaskDialog.js","scripts/mockData.js","services/IndexedDbEngine.js","services/StorageService.js","components/AppContent.js","components/App.js","serviceWorker.js","index.js"],"names":["AppHeader","className","SubTaskListItem","props","itemId","subtask","id","done","status","key","removable","onClick","onRemove","htmlFor","title","description","type","onChange","event","onTaskChange","checked","target","disabled","SubTaskList","subtaskItens","tasks","map","removableItems","ProgressBar","styles","width","this","value","max","style","React","Component","TaskItem","state","subtaskCollapse","toggleSubstaskList","bind","setState","task","subtasks","reduce","previousValue","changedColumn","getProgressBarValue","length","onEdit","onDelete","parent","TaskList","taskItens","onEditTask","onDeleteTask","TaskColumn","Dialog","wrapperClass","show","children","onCancel","onFinish","TextField","handleChange","e","name","isValid","label","placeholder","invalidMessage","SubTaskForm","isDescriptionValid","validationErrorMessage","handleClick","validateFields","slice","push","uuidv4","onRemoveSubtask","NewTaskDialog","isSubtasksValid","descriptionInvalidMessage","subtasksInvalidMessage","handleFinish","handleRemoveSubtask","console","log","indexToRemove","findIndex","item","splice","TASKS_MOCK","dbPromise","openDB","upgrade","db","oldVersion","newVersion","transaction","createObjectStore","keyPath","tx","objectStore","createIndex","unique","put","IndexedDbEngine","scope","defaultErrorHandler","errorHandler","_run","get","indexName","indexValues","index","getAll","object","delete","clear","command","then","StorageService","erroHandler","window","indexedDB","storageEngine","property","values","deleteAll","AppContent","handleCancel","handleTaskChange","handleStorageError","handleEditTask","handleDeleteTask","storage","showDialog","taskToEdit","forEach","filter","updateTaskStatus","t","qttyDone","taskStatus","getTaskStatus","stateTask","find","s","getTasksByState","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e65c2364.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../styles/AppHeader.css';\r\n\r\nfunction AppHeader() {\r\n  return (\r\n    <div className=\"app-header\">\r\n      <h1 className='app-title'>To-Do React</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport * as Constants from '../scripts/constants';\r\n\r\nimport '../styles/SubTaskListItem.css';\r\n\r\nfunction SubTaskListItem(props) {\r\n  const itemId = `js-subtask-${props.subtask.id}`;\r\n  const done = props.subtask.status === Constants.SUBTASK_STATUS_DONE;\r\n\r\n  return (\r\n    <li className='subtask-item' key={ props.subtask.id }>\r\n      { props.removable &&\r\n        <button className='button subtask-item-remove' onClick={ () => { if(props.removable) props.onRemove(props.subtask) } }>&#x274C;</button>\r\n      }\r\n\r\n      <label \r\n        htmlFor={ itemId } \r\n        title={ props.subtask.description } \r\n        className={ done ? 'subtask-item--done' : '' }>\r\n        <input id={ itemId }\r\n          type='checkbox' \r\n          onChange={ (event) => { \r\n            if(props.onTaskChange) \r\n              props.onTaskChange({ checked: event.target.checked, subtask: props.subtask }) \r\n          }} \r\n          disabled={ props.disabled }\r\n          checked={ done } />\r\n\r\n        { props.subtask.description }\r\n      </label>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default SubTaskListItem;","export const TASK_STATUS_TODO = 0;\r\nexport const TASK_STATUS_DOING = 1;\r\nexport const TASK_STATUS_DONE = 2;\r\n\r\nexport const SUBTASK_STATUS_NOT_DONE = 0;\r\nexport const SUBTASK_STATUS_DONE = 1;","import React from 'react';\r\nimport SubTaskListItem from './SubTaskListItem';\r\n\r\nimport '../styles/SubTaskList.css';\r\n\r\nfunction SubTaskList(props) {\r\n  const subtaskItens = props.tasks.map((subtask) => {\r\n    return <SubTaskListItem \r\n              subtask={ subtask } \r\n              onTaskChange={ props.onTaskChange } \r\n              onRemove={ props.onRemove }\r\n              disabled={ props.disabled }\r\n              key={ subtask.id }\r\n              removable={ props.removableItems } />;\r\n  });\r\n  \r\n  return (\r\n    <ul className='subtask-list'>\r\n      { subtaskItens }\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default SubTaskList;","import React from 'react';\r\n\r\nimport '../styles/ProgressBar.css';\r\n\r\nclass ProgressBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const styles = {\r\n      width: `${this.props.value * 100 / this.props.max}%`\r\n    };\r\n\r\n    return (\r\n      <div className=\"progress-bar\">\r\n        <div className=\"progress-bar-progress\" style={styles}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport SubTaskList from './SubTaskList';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nimport * as Constants from '../scripts/constants';\r\n\r\nimport '../styles/TaskItem.css';\r\n\r\nclass TaskItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      subtaskCollapse: true\r\n    }\r\n\r\n    this.toggleSubstaskList = this.toggleSubstaskList.bind(this);\r\n  }\r\n\r\n  toggleSubstaskList() {\r\n    this.setState({ subtaskCollapse: !this.state.subtaskCollapse });\r\n  }\r\n\r\n  getProgressBarValue() {\r\n    return this.props.task.subtasks.reduce((previousValue, subtask) => {\r\n      if(subtask.status === Constants.SUBTASK_STATUS_DONE)\r\n        return previousValue + 1;\r\n      \r\n      return previousValue;\r\n    }, 0);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <li className={ this.props.task.changedColumn ? 'task-item task-item--moved' : 'task-item' }>\r\n        <span className={ this.state.subtaskCollapse ? 'task-item-arrow task-item-arrow--collapsed' : 'task-item-arrow' }>&#x1F53D;</span>\r\n        \r\n        <p className=\"task-item-title\" title={ this.props.task.description } onClick={ this.toggleSubstaskList }>{ this.props.task.description }</p>\r\n\r\n        <ProgressBar value={ this.getProgressBarValue() } max={ this.props.task.subtasks.length } />\r\n\r\n        <div className='task-item-options'>\r\n          <span>&#x1F6E0;</span>\r\n          <button className='button' onClick={ () => this.props.onEdit(this.props.task) }>&#x270D; Editar</button>\r\n          <button className='button' onClick={ () => this.props.onDelete(this.props.task) }>&#x1F5D1; Excluir</button>\r\n        </div>\r\n\r\n        <div className={ this.state.subtaskCollapse ? 'subtasks subtasks--collapsed' : 'subtasks' }>\r\n          <SubTaskList\r\n            tasks={ this.props.task.subtasks } \r\n            onTaskChange={ (subtask) => this.props.onTaskChange({ \r\n              parent:this.props.task, \r\n              subtask: subtask.subtask, \r\n              checked: subtask.checked \r\n            }) }/>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskItem;","import React from 'react';\r\nimport TaskItem from './TaskItem';\r\n\r\nimport '../styles/TaskList.css';\r\n\r\nfunction TaskList(props) {\r\n  const taskItens = props.tasks.map((task) => {\r\n    return (\r\n      <TaskItem\r\n        task={ task } \r\n        onTaskChange={ props.onTaskChange } \r\n        onEdit={ props.onEditTask }\r\n        onDelete={ props.onDeleteTask }\r\n        key={ task.id }/>\r\n    );\r\n  });\r\n  \r\n  return (\r\n    <div className='task-list-container'>\r\n      <ul className='task-list'>\r\n        { taskItens }\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import React from 'react';\r\nimport TaskList from './TaskList';\r\n\r\nimport '../styles/TaskColumn.css';\r\n\r\nfunction TaskColumn(props){\r\n  return (\r\n    <div className=\"task-column\">\r\n      <h2>{ props.title }</h2>\r\n\r\n      <TaskList \r\n        tasks={ props.tasks } \r\n        onTaskChange={ props.onTaskChange }\r\n        onEditTask={ props.onEditTask }\r\n        onDeleteTask={ props.onDeleteTask } />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskColumn;","import React from 'react';\r\n\r\nimport '../styles/Dialog.css';\r\n\r\nfunction Dialog(props) {\r\n  const wrapperClass = props.show ? 'dialog dialog--show' : 'dialog';\r\n  \r\n  return (\r\n    <div className={ wrapperClass }>\r\n      <div className='dialog-content'>\r\n        <div className='dialog-header'>\r\n          <h3>{ props.title }</h3>\r\n        </div>\r\n        \r\n        <div className='dialog-body'>\r\n          { props.children }\r\n        </div>\r\n\r\n        <div className='dialog-footer'>\r\n          <button className= 'button button-secondary dialog-cancel' onClick={ props.onCancel }>Cancel</button>\r\n          <button className='button button-primary dialog-finish' onClick={ props.onFinish }>Finish</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\n\r\nimport '../styles/Input.css';\r\n\r\nclass TextField extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const e = event;\r\n    this.props.onChange({\r\n      name: e.target.id,\r\n      value: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const value = this.props.value;\r\n\r\n    return (\r\n      <div className={`input ${this.props.isValid ? '' : 'input--invalid'}`}>\r\n        <label className='input-label' htmlFor={ this.props.name }>{ this.props.label }</label>\r\n        <input className='input-target' type='text' placeholder={ this.props.placeholder } id={ this.props.name } value={ value } onChange={ this.handleChange }/>\r\n        { \r\n          !this.props.isValid &&\r\n          <p className='input-invalid-message'>{ this.props.invalidMessage }</p> \r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextField;","import React from 'react';\r\nimport TextField from './TextField';\r\nimport SubTaskList from './SubTaskList';\r\n\r\nimport * as Constants from '../scripts/constants';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport '../styles/Input.css';\r\nimport '../styles/SubTaskForm.css';\r\n\r\nclass SubTaskForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      description: '',\r\n      isDescriptionValid:true,\r\n      validationErrorMessage: ''\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const e = event;\r\n    const value = e.value;\r\n\r\n    switch(e.name) {\r\n      case this.props.name:\r\n        this.setState({ description: value });\r\n        break;\r\n    }\r\n  }\r\n\r\n  validateFields() {\r\n    if(!this.state.description || this.state.description === '') {\r\n      this.setState({\r\n        isDescriptionValid:false,\r\n        validationErrorMessage:'Description is required.'\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if(this.props.value.length >= 10) {\r\n      this.setState({\r\n        isDescriptionValid:false,\r\n        validationErrorMessage:'There are 10 subtasks already.'\r\n      });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  handleClick() {\r\n    if(!this.validateFields()) return;\r\n\r\n    let subtasks = this.props.value.slice();\r\n\r\n    subtasks.push({\r\n      id:uuidv4(),\r\n      description: this.state.description,\r\n      status:Constants.SUBTASK_STATUS_NOT_DONE\r\n    });\r\n\r\n    this.setState({ description: '', isDescriptionValid:true });\r\n\r\n    this.props.onChange({\r\n      name: this.props.name,\r\n      value: subtasks\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={ `input ${this.props.isValid ? '' : 'input--invalid'}` }>\r\n        <label className='input-label label-with-hint'>{ this.props.label }</label>\r\n        <p className='input-hint'>Type the subtask description and click \"Add\".</p>\r\n\r\n        <div className='subtask-form-add-wrapper'>\r\n          <TextField\r\n            placeholder='Subtask description'\r\n            name={ this.props.name }\r\n            value={ this.state.description }\r\n            onChange={ this.handleChange }\r\n            isValid={this.state.isDescriptionValid}\r\n            invalidMessage={ this.state.validationErrorMessage } />\r\n\r\n          <button className='button button-primary' onClick={ this.handleClick }>Add</button>\r\n        </div>\r\n\r\n        <p className='input-hint'>Maximum number of subtasks is 10.</p>\r\n\r\n        <SubTaskList \r\n          tasks={ this.props.value } \r\n          disabled={true} \r\n          removableItems={true}\r\n          onRemove={ this.props.onRemoveSubtask }/>\r\n\r\n        <p className='input-hint'>Click the red 'X' to remove an item.</p>\r\n\r\n        {\r\n          !this.props.isValid &&\r\n          <p className='input-invalid-message'>{ this.props.invalidMessage }</p>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SubTaskForm;","import React from 'react';\r\nimport Dialog from './Dialog';\r\nimport TextField from './TextField';\r\nimport SubTaskForm from './SubTaskForm';\r\n\r\nimport * as Constants from '../scripts/constants';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass NewTaskDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      description:'',\r\n      subtasks:[],\r\n      isDescriptionValid:true,\r\n      isSubtasksValid:true,\r\n      descriptionInvalidMessage: '',\r\n      subtasksInvalidMessage: ''\r\n    }\r\n\r\n    this.handleFinish = this.handleFinish.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleRemoveSubtask = this.handleRemoveSubtask.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if(this.props.task) {\r\n      //Editing a task\r\n      this.setState({ \r\n        description: this.props.task.description,\r\n        subtasks: this.props.task.subtasks\r\n      });\r\n    }\r\n  }\r\n\r\n  validateFields() {\r\n    const { description, subtasks } = this.state;\r\n    let { isDescriptionValid, isSubtasksValid, descriptionInvalidMessage, subtasksInvalidMessage } = this.state;\r\n\r\n    isDescriptionValid = true;\r\n    isSubtasksValid = true;\r\n\r\n    if(!description || description === '') {\r\n      isDescriptionValid = false;\r\n      descriptionInvalidMessage = 'Description is required.';\r\n    }\r\n\r\n    if(!subtasks || subtasks.length <= 0) {\r\n      isSubtasksValid = false;\r\n      subtasksInvalidMessage = 'At least one subtask is required.';\r\n    }\r\n\r\n    if(subtasks.length > 10) {\r\n      isSubtasksValid = false;\r\n      subtasksInvalidMessage = 'Maximum number of subtasks is 10.';\r\n    }\r\n\r\n    this.setState({ isDescriptionValid, isSubtasksValid, subtasksInvalidMessage, descriptionInvalidMessage });\r\n\r\n    return isDescriptionValid && isSubtasksValid;\r\n  }\r\n\r\n  handleFinish(){\r\n    const { description, subtasks } = this.state;\r\n\r\n    if(!this.validateFields()) return;\r\n   \r\n    this.props.onFinish({\r\n      id: this.props.task ? this.props.task.id : uuidv4(),\r\n      description: description,\r\n      subtasks: subtasks,\r\n      status: this.props.task ? this.props.task.status : Constants.TASK_STATUS_TODO\r\n    });\r\n\r\n    this.setState({\r\n      description:'',\r\n      subtasks:[],\r\n      isDescriptionValid:true,\r\n      isSubtasksValid:true\r\n    });    \r\n  }\r\n\r\n  handleChange(event) {\r\n    const value = event.value;\r\n\r\n    switch(event.name) {\r\n      case 'description':\r\n        this.setState({ description: value });\r\n        break;\r\n\r\n      case 'subtasks':\r\n        this.setState({ subtasks: value });\r\n        break;\r\n    };\r\n  }\r\n\r\n  handleRemoveSubtask(subtask) {\r\n    console.log(subtask);\r\n\r\n    let subtasks = this.state.subtasks.slice();\r\n    let indexToRemove = this.state.subtasks.findIndex(item => {\r\n      return item.id === subtask.id;\r\n    });\r\n    console.log(indexToRemove);\r\n\r\n    subtasks.splice(indexToRemove, 1);\r\n\r\n    this.setState({ subtasks });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog \r\n        title='&#x1F4DD; Add a new task'\r\n        onFinish={ this.handleFinish }\r\n        onCancel={ this.props.onCancel }\r\n        show={ this.props.show }>\r\n\r\n        <TextField \r\n          label='Task description' \r\n          name='description' \r\n          value={ this.state.description } \r\n          onChange={ this.handleChange }\r\n          isValid={ this.state.isDescriptionValid }\r\n          invalidMessage={ this.state.descriptionInvalidMessage } />\r\n\r\n        <SubTaskForm \r\n          label='Subtasks'\r\n          name='subtasks'\r\n          value={ this.state.subtasks }\r\n          onChange={ this.handleChange }\r\n          onRemoveSubtask={ this.handleRemoveSubtask }\r\n          isValid={ this.state.isSubtasksValid }\r\n          invalidMessage={ this.state.subtasksInvalidMessage } />\r\n\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTaskDialog;","import * as Constants from './constants.js';\r\n\r\nexport const TASKS_MOCK = [\r\n  {\r\n    id:1,\r\n    description:'Task #1',\r\n    status:Constants.TASK_STATUS_TODO,\r\n    changedColumn:false,\r\n    subtasks:[\r\n      {\r\n        id:1,\r\n        description:'SubTask #1',\r\n        status:Constants.SUBTASK_STATUS_NOT_DONE\r\n      },\r\n      {\r\n        id:2,\r\n        description:'SubTask #2',\r\n        status:Constants.SUBTASK_STATUS_NOT_DONE\r\n      },\r\n      {\r\n        id:3,\r\n        description:'SubTask #3',\r\n        status:Constants.SUBTASK_STATUS_NOT_DONE\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id:2,\r\n    description:'Task #2',\r\n    status:Constants.TASK_STATUS_TODO,\r\n    changedColumn:false,\r\n    subtasks:[\r\n      {\r\n        id:4,\r\n        description:'SubTask #1',\r\n        status:Constants.SUBTASK_STATUS_NOT_DONE\r\n      },\r\n      {\r\n        id:5,\r\n        description:'SubTask #2',\r\n        status:Constants.SUBTASK_STATUS_NOT_DONE\r\n      },\r\n      {\r\n        id:6,\r\n        description:'SubTask #3',\r\n        status:Constants.SUBTASK_STATUS_NOT_DONE\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id:3,\r\n    description:'Task #3',\r\n    status:Constants.TASK_STATUS_DOING,\r\n    changedColumn:false,\r\n    subtasks:[\r\n      {\r\n        id:7,\r\n        description:'SubTask #1',\r\n        status:Constants.SUBTASK_STATUS_DONE\r\n      },\r\n      {\r\n        id:8,\r\n        description:'SubTask #2',\r\n        status:Constants.SUBTASK_STATUS_NOT_DONE\r\n      },\r\n      {\r\n        id:9,\r\n        description:'SubTask #3',\r\n        status:Constants.SUBTASK_STATUS_NOT_DONE\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id:4,\r\n    description:'Task #4',\r\n    status:Constants.TASK_STATUS_DONE,\r\n    changedColumn:false,\r\n    subtasks:[\r\n      {\r\n        id:10,\r\n        description:'SubTask #1',\r\n        status:Constants.SUBTASK_STATUS_DONE\r\n      },\r\n      {\r\n        id:11,\r\n        description:'SubTask #2',\r\n        status:Constants.SUBTASK_STATUS_DONE\r\n      },\r\n      {\r\n        id:12,\r\n        description:'SubTask #3',\r\n        status:Constants.SUBTASK_STATUS_DONE\r\n      }\r\n    ]\r\n  }\r\n];","import { openDB } from 'idb';\r\nimport { TASKS_MOCK } from '../scripts/mockData';\r\n\r\nconst DATABASE_NAME = 'TODO_REACT';\r\nconst DATABASE_VERSION = 1;\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, \r\n  {\r\n    upgrade(db, oldVersion, newVersion, transaction) {\r\n      switch(newVersion) {\r\n        case 1:\r\n          db.createObjectStore('Tasks', { keyPath: 'id' });\r\n          \r\n          const tx = transaction.objectStore('Tasks', 'readwrite');\r\n          tx.createIndex('id', 'id', { unique: true });\r\n          tx.createIndex('description', 'description', { unique: false });\r\n          tx.createIndex('subtasks', 'subtasks', { unique: false });\r\n          tx.createIndex('status', 'status', { unique: false });\r\n\r\n          for(let task of TASKS_MOCK) {\r\n            tx.put(task);\r\n          }\r\n      }\r\n    }\r\n  });\r\n\r\nexport default class IndexedDbEngine {\r\n\r\n  constructor(scope, defaultErrorHandler) {\r\n    this.scope = scope;\r\n    this.errorHandler = defaultErrorHandler;\r\n  }\r\n\r\n  withScope(scope) {\r\n    this.scope = scope;\r\n    return this;\r\n  }\r\n\r\n  withErrorHandler(errorHandler) {\r\n    this.errorHandler = errorHandler;\r\n    return this;\r\n  }\r\n\r\n  get(key) {\r\n    return this._run(db => {\r\n      return db\r\n        .transaction(this.scope, 'readwrite')\r\n        .objectStore(this.scope)\r\n        .get(key);\r\n    });\r\n  }\r\n\r\n  getAll(indexName, indexValues = null) {\r\n    return this._run(db => {\r\n      if(indexValues) {\r\n        return db\r\n          .transaction(this.scope, 'readwrite')\r\n          .objectStore(this.scope)\r\n          .index(indexName)\r\n          .getAll(indexValues);\r\n      }\r\n      \r\n      return db\r\n        .transaction(this.scope, 'readwrite')\r\n        .objectStore(this.scope)\r\n        .index(indexName)\r\n        .getAll();\r\n    });\r\n  }\r\n\r\n  put(object, key = null) {\r\n    if(key)\r\n      return this._run(db => {\r\n        return db\r\n          .transaction(this.scope, 'readwrite')\r\n          .objectStore(this.scope)\r\n          .put(object, key);\r\n      });\r\n    else\r\n      return this._run(db => {\r\n        return db\r\n          .transaction(this.scope, 'readwrite')\r\n          .objectStore(this.scope)\r\n          .put(object);\r\n      });\r\n  }\r\n\r\n  delete(key) {\r\n    return this._run(db => {\r\n      return db\r\n        .transaction(this.scope, 'readwrite')\r\n        .objectStore(this.scope)\r\n        .delete(key);\r\n    });\r\n  }\r\n\r\n  deleteAll() {\r\n    return this._run(db => {\r\n      return db\r\n        .transaction(this.scope, 'readwrite')\r\n        .objectStore(this.scope)\r\n        .clear();\r\n    });\r\n  }\r\n\r\n  _run(command) {\r\n     return dbPromise.then(command);\r\n  }\r\n}","import IndexedDbEngine from './IndexedDbEngine';\r\nimport LocalStorageEngine from './LocalStorageEngine';\r\n\r\nexport default class StorageService {\r\n  constructor(scope, erroHandler = null) {\r\n    if(window.indexedDB) \r\n      this.storageEngine = new IndexedDbEngine(scope, erroHandler);\r\n    /*else \r\n      this.storageEngine = new LocalStorageEngine();*/\r\n  }\r\n\r\n  get(key) {\r\n    return this.storageEngine.get(key);\r\n  }\r\n\r\n  getAll(property, values = null) {\r\n    return this.storageEngine.getAll(property, values);\r\n  }\r\n\r\n  put(object, key = null) {\r\n    return this.storageEngine.put(object, key);\r\n  }\r\n\r\n  delete(key) {\r\n    return this.delete(key);\r\n  }\r\n\r\n  deleteAll() {\r\n    return this.deleteAll();\r\n  }\r\n  \r\n}\r\n","import React from 'react';\r\nimport TaskColumn from './TaskColumn';\r\nimport NewTaskDialog from './NewTaskDialog';\r\n\r\nimport StorageService from '../services/StorageService';\r\n\r\nimport * as Constants from '../scripts/constants';\r\n\r\nimport '../styles/AppContent.css';\r\n\r\nclass AppContent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleFinish = this.handleFinish.bind(this);\r\n    this.handleCancel = this.handleCancel.bind(this);\r\n    this.handleTaskChange = this.handleTaskChange.bind(this);\r\n    this.handleStorageError = this.handleStorageError.bind(this);\r\n    this.handleEditTask = this.handleEditTask.bind(this);\r\n    this.handleDeleteTask = this.handleDeleteTask.bind(this);\r\n\r\n    this.storage = new StorageService('Tasks', this.handleStorageError);\r\n\r\n    this.state = {\r\n      tasks: [],\r\n      showDialog: false,\r\n      taskToEdit: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.storage.getAll('id').then(tasks => {\r\n      tasks.forEach(task => {\r\n        task.changedColumn = false;\r\n      });\r\n      this.setState({ tasks });\r\n    });\r\n  }\r\n\r\n  handleStorageError(event) {\r\n    console.log(event);\r\n  }\r\n\r\n  getTasksByState(status) {\r\n    const tasks = this.state.tasks.slice();\r\n    return tasks.filter((task) => {\r\n      return task.status === status;\r\n    });\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({ showDialog:true });\r\n  }\r\n\r\n  handleFinish(task) {\r\n    if(!this.state.taskToEdit) {\r\n      // Creating a new task\r\n      this.storage.put(task).then(key => {\r\n        if(key) {\r\n          const tasks = this.state.tasks.slice();\r\n          tasks.push(task);\r\n          this.setState({ tasks, showDialog:false });\r\n        }\r\n      });    \r\n    }\r\n    else {\r\n      // Updating existing task\r\n      this.updateTaskStatus(task);\r\n\r\n      this.storage.put(task).then(key => {\r\n        if(key) {\r\n          const tasks = this.state.tasks.slice();\r\n          let index = tasks.findIndex(t => t.id === key);    \r\n          tasks[index] = task;\r\n          this.setState({ tasks, showDialog:false });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  handleCancel() {\r\n    this.setState({ showDialog:false });\r\n  }\r\n\r\n  getTaskStatus(task) { \r\n    let qttyDone = task.subtasks.reduce((previousValue, subtask) => {\r\n      if(subtask.status === Constants.SUBTASK_STATUS_DONE) \r\n        return previousValue + 1;\r\n\r\n      return previousValue;\r\n    }, 0);\r\n\r\n    if(qttyDone <= 0) \r\n      return Constants.TASK_STATUS_TODO;\r\n    else if(qttyDone >= task.subtasks.length)\r\n      return Constants.TASK_STATUS_DONE;\r\n    else\r\n      return Constants.TASK_STATUS_DOING;\r\n  }\r\n\r\n  updateTaskStatus(task) {\r\n    const taskStatus = task.status;\r\n    task.status = this.getTaskStatus(task);\r\n    task.changedColumn = (taskStatus !== task.status);\r\n  }\r\n\r\n  handleTaskChange(task) {\r\n    let tasks = this.state.tasks.slice();\r\n\r\n    let stateTask = tasks.find((t) => {\r\n      return t.id === task.parent.id;\r\n    });    \r\n\r\n    let subtask = stateTask.subtasks.find((s) => {\r\n      return s.id === task.subtask.id;\r\n    });\r\n\r\n    subtask.status = (task.checked ? Constants.SUBTASK_STATUS_DONE : Constants.SUBTASK_STATUS_NOT_DONE);\r\n        \r\n    this.updateTaskStatus(stateTask);\r\n\r\n    this.storage.put(stateTask).then(key => {\r\n      if(key)\r\n        this.setState(tasks);\r\n    });\r\n  }\r\n\r\n  handleEditTask(task) {\r\n    this.setState({ showDialog:true, taskToEdit: task });\r\n  }\r\n\r\n  handleDeleteTask(task) {\r\n    console.log(task);\r\n  }\r\n\r\n  render() {\r\n    const show = this.state.showDialog;\r\n\r\n    return (\r\n      <div className=\"app-content\">\r\n        <button className=\"button button-secondary button-lg\" onClick={this.handleClick}>&#x1F4CC; New task</button>\r\n\r\n        <div className=\"task-columns\">\r\n          <TaskColumn \r\n            title='&#x1F4CC; To do' \r\n            tasks={ this.getTasksByState(Constants.TASK_STATUS_TODO) } \r\n            onTaskChange={ this.handleTaskChange }\r\n            onEditTask={ this.handleEditTask }\r\n            onDeleteTask={ this.handleDeleteTask } />\r\n          <TaskColumn \r\n            title='&#x23F3; Doing' \r\n            tasks={ this.getTasksByState(Constants.TASK_STATUS_DOING) } \r\n            onTaskChange={ this.handleTaskChange }\r\n            onEditTask={ this.handleEditTask }\r\n            onDeleteTask={ this.handleDeleteTask } />\r\n          <TaskColumn \r\n            title='&#x2705; Done' \r\n            tasks={ this.getTasksByState(Constants.TASK_STATUS_DONE) } \r\n            onTaskChange={ this.handleTaskChange }\r\n            onEditTask={ this.handleEditTask }\r\n            onDeleteTask={ this.handleDeleteTask } />\r\n        </div>\r\n\r\n        {\r\n          show &&\r\n          <NewTaskDialog \r\n            task={this.state.taskToEdit}\r\n            onFinish={this.handleFinish}\r\n            onCancel={this.handleCancel}/>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppContent;","import React from 'react';\nimport AppHeader from './AppHeader';\nimport AppContent from './AppContent';\n\nimport '../styles/App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <AppHeader />\n      <AppContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}